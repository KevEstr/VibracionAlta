// ============================================
// ‚úÖ C√ìDIGO N8N CORRECTO - FILTRA POR HORA SELECCIONADA
// ============================================

const duracionCita = 90;

// ‚úÖ HORARIOS ACTUALIZADOS
const horariosLunesViernes = ['09:00', '10:30', '12:30', '14:00', '16:00', '18:00'];
const horariosSabado = ['12:30']; // SOLO 12:30 PM LOS S√ÅBADOS

// Festivos Colombia 2025
const festivos = [
  '2025-01-01', '2025-01-06', '2025-03-24', '2025-04-17', '2025-04-18',
  '2025-05-01', '2025-06-02', '2025-06-23', '2025-06-30', '2025-07-07',
  '2025-07-20', '2025-08-07', '2025-08-18', '2025-10-13', '2025-11-03',
  '2025-11-17', '2025-12-08', '2025-12-25'
];

// üîë RECIBIR LA HORA SELECCIONADA DESDE EL FRONTEND
const horaSeleccionada = $input.first().json.body.hora; // Ejemplo: "12:30"

console.log('========================================');
console.log('üîç HORA SELECCIONADA:', horaSeleccionada);
console.log('========================================');

// Eventos ocupados desde Google Calendar
const eventosOcupados = $input.all()
  .filter(item => item.json.start && item.json.start.dateTime)
  .map(item => ({
    inicio: new Date(item.json.start.dateTime),
    fin: new Date(item.json.end.dateTime)
  }));

console.log('üìÖ Total eventos ocupados:', eventosOcupados.length);

// üîç BUSCAR D√çAS DISPONIBLES SOLO PARA LA HORA SELECCIONADA
const diasDisponibles = [];
let dia = $now.startOf('day');

for (let d = 0; d < 60; d++) {
  dia = dia.plus({ days: 1 });
  
  // ‚ùå Excluir domingos
  if (dia.weekday === 7) continue;
  
  // ‚ùå Excluir festivos
  const fechaStr = dia.toFormat('yyyy-MM-dd');
  if (festivos.includes(fechaStr)) continue;
  
  // üîë DETERMINAR QU√â HORARIOS APLICAN PARA ESTE D√çA
  const horariosDelDia = dia.weekday === 6 ? horariosSabado : horariosLunesViernes;
  
  // ‚ö†Ô∏è FILTRO CR√çTICO: ¬øEsta hora est√° disponible este d√≠a?
  // Si seleccion√≥ 12:30 y es lunes, SI est√° disponible (lunes tiene 12:30)
  // Si seleccion√≥ 14:00 y es s√°bado, NO est√° disponible (s√°bado solo tiene 12:30)
  if (!horariosDelDia.includes(horaSeleccionada)) {
    console.log(`‚ùå ${fechaStr} (${dia.toFormat('EEEE')}): hora ${horaSeleccionada} NO disponible`);
    continue; // Saltar este d√≠a
  }
  
  console.log(`‚úÖ ${fechaStr} (${dia.toFormat('EEEE')}): hora ${horaSeleccionada} S√ç disponible, verificando ocupaci√≥n...`);
  
  // üïê Crear el slot de tiempo SOLO para la hora seleccionada
  const [hora, minuto] = horaSeleccionada.split(':').map(Number);
  const inicioSlot = dia.set({ hour: hora, minute: minuto, second: 0 });
  const finSlot = inicioSlot.plus({ minutes: duracionCita });
  
  // ‚è∞ Verificar si este slot est√° ocupado por un evento
  let estaOcupado = false;
  
  for (let j = 0; j < eventosOcupados.length; j++) {
    const evento = eventosOcupados[j];
    const eventoInicio = evento.inicio.getTime();
    const eventoFin = evento.fin.getTime();
    const slotInicio = inicioSlot.toMillis();
    const slotFin = finSlot.toMillis();
    
    // Verificar si hay superposici√≥n
    if (
      (slotInicio >= eventoInicio && slotInicio < eventoFin) ||
      (slotFin > eventoInicio && slotFin <= eventoFin) ||
      (slotInicio <= eventoInicio && slotFin >= eventoFin)
    ) {
      estaOcupado = true;
      console.log(`  ‚õî Ocupado por evento: ${new Date(eventoInicio).toISOString()}`);
      break;
    }
  }
  
  // ‚úÖ Si NO est√° ocupado, agregarlo a los d√≠as disponibles
  if (!estaOcupado) {
    console.log(`  ‚úÖ DISPONIBLE`);
    diasDisponibles.push({
      fecha: inicioSlot.toFormat('yyyy-MM-dd'),
      diaSemana: inicioSlot.toFormat('EEEE'),
      fechaLegible: inicioSlot.toFormat('dd MMM yyyy'),
      hora: horaSeleccionada, // LA HORA QUE SELECCION√ì EL USUARIO
      fechaHoraISO: inicioSlot.toISO()
    });
  }
}

console.log('========================================');
console.log('‚úÖ TOTAL D√çAS DISPONIBLES:', diasDisponibles.length);
console.log('========================================');

// üì§ RETORNAR RESPUESTA
return [{
  json: {
    success: true,
    horaConsultada: horaSeleccionada, // Para verificaci√≥n
    totalDias: diasDisponibles.length,
    dias: diasDisponibles
  }
}];
